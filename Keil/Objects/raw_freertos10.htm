<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\raw_freertos10.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\raw_freertos10.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Fri Dec 28 14:07:02 2018
<BR><P>
<H3>Maximum Stack Usage =        328 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; prvTraceStoreKernelCallWithParam &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[35]">Default_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[35]">Default_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[44]">CAN2_RX0_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[45]">CAN2_RX1_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[46]">CAN2_SCE_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[43]">CAN2_TX_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from usart.o(i.DMA1_Channel4_IRQHandler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from usart.o(i.DMA1_Channel7_IRQHandler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3c]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3d]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3e]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3f]">DMA2_Channel4_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[40]">DMA2_Channel5_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[35]">Default_Handler</a> from startup_stm32f10x_cl.o(.text) referenced 7 times from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[41]">ETH_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[42]">ETH_WKUP_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from sx1276-lora.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from sx1276-lora.o(i.EXTI3_IRQHandler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[52]">LED_D1_Task</a> from app_tsks.o(i.LED_D1_Task) referenced from main.o(i.main)
 <LI><a href="#[55]">LED_D2_toggle</a> from app_tsks.o(i.LED_D2_toggle) referenced from main.o(i.main)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[47]">OTG_FS_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[34]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[37]">SPI3_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from timer.o(i.TIM2_IRQHandler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from timer.o(i.TIM4_IRQHandler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[36]">TIM5_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3a]">TIM6_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3b]">TIM7_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[38]">UART4_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[39]">UART5_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from usart.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from usart.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from usart.o(i.USART3_IRQHandler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[54]">Uart1_print_back_Task</a> from app_tsks.o(i.Uart1_print_back_Task) referenced from main.o(i.main)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[49]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_cl.o(.text)
 <LI><a href="#[4b]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[4c]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[4a]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[4e]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[4f]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[53]">cmd_analysis_Task</a> from app_tsks.o(i.cmd_analysis_Task) referenced from main.o(i.main)
 <LI><a href="#[50]">irda_learning_Task</a> from app_tsks.o(i.irda_learning_Task) referenced from app_tsks.o(i.cmd_analysis_Task)
 <LI><a href="#[51]">irda_sending_Task</a> from app_tsks.o(i.irda_sending_Task) referenced from app_tsks.o(i.cmd_analysis_Task)
 <LI><a href="#[4d]">isspace</a> from isspace_c.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[48]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[57]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[56]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[58]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
 <LI><a href="#[6]">vPortSVCHandler</a> from port.o(.emb_text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[8]">xPortPendSVHandler</a> from port.o(.emb_text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[9]">xPortSysTickHandler</a> from port.o(i.xPortSysTickHandler) referenced from startup_stm32f10x_cl.o(RESET)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[49]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(.text)
</UL>
<P><STRONG><a name="[170]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[59]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[72]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[171]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[172]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[173]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[174]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[175]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[6]"></a>vPortSVCHandler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[169]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[8]"></a>xPortPendSVHandler</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xPortPendSVHandler &rArr; vTaskSwitchContext &rArr; prvTraceStoreTaskswitch &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[15f]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[f8]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irda_learning_Task
</UL>

<P><STRONG><a name="[167]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTracePrintF_Helper
</UL>

<P><STRONG><a name="[176]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[177]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1Init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_analysis_Task
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276DeviceInit
</UL>

<P><STRONG><a name="[ca]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irda_learning_Task
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_DMA_Config
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceInitTraceData
</UL>

<P><STRONG><a name="[179]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[f3]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_analysis_Task
</UL>

<P><STRONG><a name="[e6]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1SendStr
</UL>

<P><STRONG><a name="[e5]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1SendStr
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_analysis_Task
</UL>

<P><STRONG><a name="[147]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceLookupSymbolTableEntry
</UL>

<P><STRONG><a name="[5f]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_analysis_Task
</UL>

<P><STRONG><a name="[61]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[74]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[63]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFFrequency
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6c]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFFrequency
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFFrequency
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceUserEventFormat
</UL>

<P><STRONG><a name="[17a]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6f]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[64]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[17b]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[17c]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[17d]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[60]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[4a]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[4b]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[17e]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[66]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ef]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[5a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[17f]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>isspace</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, isspace_c.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ctype_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[70]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[73]"></a>__ctype_lookup</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ctype_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[180]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usart.o(i.DMA1_Channel4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = DMA1_Channel4_IRQHandler &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList &rArr; prvTraceStoreTaskReady &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTraceStoreISREnd
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTraceStoreISRBegin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usart.o(i.DMA1_Channel7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel7_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>DMA_ClearFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
</UL>

<P><STRONG><a name="[ce]"></a>DMA_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_printf
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1SendStr
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_DMA_Config
</UL>

<P><STRONG><a name="[cc]"></a>DMA_DeInit</STRONG> (Thumb, 218 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_DMA_Config
</UL>

<P><STRONG><a name="[d3]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_GetCurrDataCounter))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[76]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
</UL>

<P><STRONG><a name="[cf]"></a>DMA_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_DMA_Config
</UL>

<P><STRONG><a name="[cd]"></a>DMA_Init</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32f10x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_DMA_Config
</UL>

<P><STRONG><a name="[d7]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_SetCurrDataCounter))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_printf
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1SendStr
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sx1276-lora.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EXTI15_10_IRQHandler &rArr; SX1276IrqDIO0 &rArr; SX276IrqCad &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_RW_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IrqDIO0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sx1276-lora.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EXTI3_IRQHandler &rArr; SX1276IrqDIO0 &rArr; SX276IrqCad &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_RW_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IrqDIO0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[97]"></a>EXTI_Init</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, stm32f10x_exti.o(i.EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ExtiDIOAllDisable
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ExtiDIO0Enable
</UL>

<P><STRONG><a name="[82]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteHalfWord
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ErasePage
</UL>

<P><STRONG><a name="[7c]"></a>FLASH_ErasePage</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_flash.o(i.FLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ErasePage
</UL>

<P><STRONG><a name="[7f]"></a>FLASH_GetBank1Status</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_GetBank1Status))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[83]"></a>FLASH_Lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteHalfWord
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ErasePage
</UL>

<P><STRONG><a name="[7e]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, stm32f10x_flash.o(i.FLASH_ProgramHalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteHalfWord
</UL>

<P><STRONG><a name="[81]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteHalfWord
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ErasePage
</UL>

<P><STRONG><a name="[7d]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f10x_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[80]"></a>Flash_ErasePage</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, flash.o(i.Flash_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Flash_ErasePage &rArr; FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irda_learning_Task
</UL>

<P><STRONG><a name="[f7]"></a>Flash_ReadHalfWord</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, flash.o(i.Flash_ReadHalfWord))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irda_learning_Task
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_sending
</UL>

<P><STRONG><a name="[84]"></a>Flash_WriteHalfWord</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, flash.o(i.Flash_WriteHalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Flash_WriteHalfWord &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irda_learning_Task
</UL>

<P><STRONG><a name="[a1]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_gpio.o(i.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276InitIo
</UL>

<P><STRONG><a name="[88]"></a>GPIO_Init</STRONG> (Thumb, 162 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_SPI
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_pwm_on
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_pwm_off
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276InitIo
</UL>

<P><STRONG><a name="[dc]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_PinRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1Init
</UL>

<P><STRONG><a name="[b7]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadDio0
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadDio4
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[8e]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_pwm_off
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_sending
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_D2_toggle
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_D1_Task
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetReset
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>

<P><STRONG><a name="[8c]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_sending
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_D2_toggle
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_D1_Task
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetReset
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>

<P><STRONG><a name="[9f]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteRxTx
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276InitIo
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>Initial_SPI</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, spi.o(i.Initial_SPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Initial_SPI &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[52]"></a>LED_D1_Task</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, app_tsks.o(i.LED_D1_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LED_D1_Task &rArr; Uart1SendStr &rArr; xQueueSemaphoreTake &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; prvTraceStoreTaskReady &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1SendStr
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[55]"></a>LED_D2_toggle</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, app_tsks.o(i.LED_D2_toggle))
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[8f]"></a>LED_Init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, app_tsks.o(i.LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LED_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>NVIC_Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276InitIo
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_counter_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_DMA_Config
</UL>

<P><STRONG><a name="[f9]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cb]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_DMA_Config
</UL>

<P><STRONG><a name="[87]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_SPI
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_counter_Init
</UL>

<P><STRONG><a name="[86]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_SPI
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276InitIo
</UL>

<P><STRONG><a name="[da]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 178 bytes, Stack size 20 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[8a]"></a>SPI_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_SPI
</UL>

<P><STRONG><a name="[91]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW_Byte
</UL>

<P><STRONG><a name="[93]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW_Byte
</UL>

<P><STRONG><a name="[92]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW_Byte
</UL>

<P><STRONG><a name="[89]"></a>SPI_Init</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_SPI
</UL>

<P><STRONG><a name="[90]"></a>SPI_RW_Byte</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, spi.o(i.SPI_RW_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_RW_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>

<P><STRONG><a name="[94]"></a>SX1276DeviceInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sx1276-lora.o(i.SX1276DeviceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SX1276DeviceInit &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; prvTraceStoreTaskReady &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[96]"></a>SX1276ExtiDIO0Enable</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sx1276-hal.o(i.SX1276ExtiDIO0Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SX1276ExtiDIO0Enable &rArr; EXTI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX276TxStart
</UL>

<P><STRONG><a name="[98]"></a>SX1276ExtiDIOAllDisable</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, sx1276-hal.o(i.SX1276ExtiDIOAllDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SX1276ExtiDIOAllDisable &rArr; EXTI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX276TxStart
</UL>

<P><STRONG><a name="[99]"></a>SX1276Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sx1276.o(i.SX1276Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SX1276Init &rArr; SX1276DeviceInit &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; prvTraceStoreTaskReady &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaReset
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276DeviceInit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276InitIo
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetLoRaOn
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9a]"></a>SX1276InitIo</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, sx1276-hal.o(i.SX1276InitIo))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SX1276InitIo &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[7b]"></a>SX1276IrqDIO0</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sx1276-lora.o(i.SX1276IrqDIO0))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SX1276IrqDIO0 &rArr; SX276IrqCad &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_RW_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX276IrqCad
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[9e]"></a>SX1276LoRaInit</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, sx1276-lora.o(i.SX1276LoRaInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SX1276LoRaInit &rArr; SX1276LoRaSetSpreadingFactor &rArr; SX1276LoRaSetNbTrigPeaks &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_RW_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSymbTimeout
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSpreadingFactor
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSignalBandwidth
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFPower
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFFrequency
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPayloadLength
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPacketCrcOn
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPa20dBm
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPAOutput
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetLowDatarateOptimize
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetImplicitHeaderOn
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetErrorCoding
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetOpMode
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[9b]"></a>SX1276LoRaReset</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sx1276-lora.o(i.SX1276LoRaReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX1276LoRaReset
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetReset
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[a7]"></a>SX1276LoRaSetErrorCoding</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sx1276-loramisc.o(i.SX1276LoRaSetErrorCoding))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SX1276LoRaSetErrorCoding &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_RW_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
</UL>

<P><STRONG><a name="[aa]"></a>SX1276LoRaSetImplicitHeaderOn</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sx1276-loramisc.o(i.SX1276LoRaSetImplicitHeaderOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SX1276LoRaSetImplicitHeaderOn &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_RW_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
</UL>

<P><STRONG><a name="[ad]"></a>SX1276LoRaSetLowDatarateOptimize</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sx1276-loramisc.o(i.SX1276LoRaSetLowDatarateOptimize))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SX1276LoRaSetLowDatarateOptimize &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_RW_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
</UL>

<P><STRONG><a name="[b4]"></a>SX1276LoRaSetNbTrigPeaks</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sx1276-loramisc.o(i.SX1276LoRaSetNbTrigPeaks))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SX1276LoRaSetNbTrigPeaks &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_RW_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSpreadingFactor
</UL>

<P><STRONG><a name="[b1]"></a>SX1276LoRaSetOpMode</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sx1276-lora.o(i.SX1276LoRaSetOpMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SX1276LoRaSetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_RW_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteRxTx
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX276TxStart
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetLoRaOn
</UL>

<P><STRONG><a name="[ae]"></a>SX1276LoRaSetPAOutput</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sx1276-loramisc.o(i.SX1276LoRaSetPAOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SX1276LoRaSetPAOutput &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_RW_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
</UL>

<P><STRONG><a name="[af]"></a>SX1276LoRaSetPa20dBm</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sx1276-loramisc.o(i.SX1276LoRaSetPa20dBm))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SX1276LoRaSetPa20dBm &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_RW_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
</UL>

<P><STRONG><a name="[a8]"></a>SX1276LoRaSetPacketCrcOn</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sx1276-loramisc.o(i.SX1276LoRaSetPacketCrcOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SX1276LoRaSetPacketCrcOn &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_RW_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
</UL>

<P><STRONG><a name="[ac]"></a>SX1276LoRaSetPayloadLength</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sx1276-loramisc.o(i.SX1276LoRaSetPayloadLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SX1276LoRaSetPayloadLength &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_RW_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
</UL>

<P><STRONG><a name="[a5]"></a>SX1276LoRaSetRFFrequency</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sx1276-loramisc.o(i.SX1276LoRaSetRFFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX1276LoRaSetRFFrequency &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX276TxStart
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
</UL>

<P><STRONG><a name="[b0]"></a>SX1276LoRaSetRFPower</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, sx1276-loramisc.o(i.SX1276LoRaSetRFPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SX1276LoRaSetRFPower &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_RW_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
</UL>

<P><STRONG><a name="[a9]"></a>SX1276LoRaSetSignalBandwidth</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sx1276-loramisc.o(i.SX1276LoRaSetSignalBandwidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SX1276LoRaSetSignalBandwidth &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_RW_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
</UL>

<P><STRONG><a name="[a6]"></a>SX1276LoRaSetSpreadingFactor</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, sx1276-loramisc.o(i.SX1276LoRaSetSpreadingFactor))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SX1276LoRaSetSpreadingFactor &rArr; SX1276LoRaSetNbTrigPeaks &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_RW_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetNbTrigPeaks
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
</UL>

<P><STRONG><a name="[ab]"></a>SX1276LoRaSetSymbTimeout</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, sx1276-loramisc.o(i.SX1276LoRaSetSymbTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX1276LoRaSetSymbTimeout &rArr; SX1276WriteBuffer &rArr; SPI_RW_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
</UL>

<P><STRONG><a name="[9c]"></a>SX1276Read</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sx1276-hal.o(i.SX1276Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX1276Read &rArr; SX1276ReadBuffer &rArr; SPI_RW_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX276TxStart
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSpreadingFactor
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSignalBandwidth
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFPower
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPacketCrcOn
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPa20dBm
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPAOutput
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetLowDatarateOptimize
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetImplicitHeaderOn
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetErrorCoding
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetNbTrigPeaks
</UL>

<P><STRONG><a name="[a3]"></a>SX1276ReadBuffer</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, sx1276-hal.o(i.SX1276ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX1276ReadBuffer &rArr; SPI_RW_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSymbTimeout
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetLoRaOn
</UL>

<P><STRONG><a name="[b6]"></a>SX1276ReadDio0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sx1276-hal.o(i.SX1276ReadDio0))
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8]"></a>SX1276ReadDio4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sx1276-hal.o(i.SX1276ReadDio4))
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX276IrqCad
</UL>

<P><STRONG><a name="[b9]"></a>SX1276Send</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sx1276-lora.o(i.SX1276Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SX1276Send &rArr; SX1276LoRaSetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_RW_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetOpMode
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9d]"></a>SX1276SetLoRaOn</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, sx1276.o(i.SX1276SetLoRaOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SX1276SetLoRaOn &rArr; SX1276LoRaSetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_RW_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetOpMode
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[b2]"></a>SX1276SetReset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sx1276-hal.o(i.SX1276SetReset))
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaReset
</UL>

<P><STRONG><a name="[b3]"></a>SX1276Write</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, sx1276-hal.o(i.SX1276Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_RW_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX276TxStart
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSpreadingFactor
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSignalBandwidth
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFPower
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPayloadLength
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPacketCrcOn
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPa20dBm
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPAOutput
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetLowDatarateOptimize
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetImplicitHeaderOn
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetErrorCoding
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX276IrqCad
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetOpMode
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetLoRaOn
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetNbTrigPeaks
</UL>

<P><STRONG><a name="[a4]"></a>SX1276WriteBuffer</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, sx1276-hal.o(i.SX1276WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX1276WriteBuffer &rArr; SPI_RW_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX276TxStart
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSymbTimeout
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFFrequency
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetLoRaOn
</UL>

<P><STRONG><a name="[ba]"></a>SX1276WriteFifo</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sx1276-hal.o(i.SX1276WriteFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX1276WriteFifo &rArr; SX1276WriteBuffer &rArr; SPI_RW_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
</UL>

<P><STRONG><a name="[b5]"></a>SX1276WriteRxTx</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sx1276-hal.o(i.SX1276WriteRxTx))
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetOpMode
</UL>

<P><STRONG><a name="[a2]"></a>SX276IrqCad</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sx1276-lora.o(i.SX276IrqCad))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SX276IrqCad &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_RW_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadDio4
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IrqDIO0
</UL>

<P><STRONG><a name="[bb]"></a>SX276TxStart</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, sx1276-lora.o(i.SX276TxStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SX276TxStart &rArr; SX1276LoRaSetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_RW_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFFrequency
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetOpMode
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ExtiDIOAllDisable
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ExtiDIO0Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc]"></a>SystemInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, timer.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[c1]"></a>TIM2_delay_us</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timer.o(i.TIM2_delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIM2_delay_us &rArr; Timer2_counter_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_counter_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_sending
</UL>

<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, timer.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture4
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[bf]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_counter_Init
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[c5]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_counter_Init
</UL>

<P><STRONG><a name="[c0]"></a>TIM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_counter_Init
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[c3]"></a>TIM_GetCapture4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_GetCapture4))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[be]"></a>TIM_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[c6]"></a>TIM_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irda_learning_Task
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_counter_Init
</UL>

<P><STRONG><a name="[c4]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_counter_Init
</UL>

<P><STRONG><a name="[c2]"></a>Timer2_counter_Init</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, timer.o(i.Timer2_counter_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Timer2_counter_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_delay_us
</UL>

<P><STRONG><a name="[c7]"></a>Timer3_pwm_off</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, timer.o(i.Timer3_pwm_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Timer3_pwm_off &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_sending
</UL>

<P><STRONG><a name="[c8]"></a>Timer3_pwm_on</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, timer.o(i.Timer3_pwm_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Timer3_pwm_on &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_sending
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = USART1_IRQHandler &rArr; vTracePrintF &rArr; vTracePrintF_Helper &rArr; prvTraceUserEventFormat &rArr; xTraceRegisterString &rArr; prvTraceOpenSymbol &rArr; prvTraceLookupSymbolTableEntry &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTracePrintF
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTraceStoreISREnd
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTraceStoreISRBegin
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, usart.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART2_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usart.o(i.USART3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[d6]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[de]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1Init
</UL>

<P><STRONG><a name="[d0]"></a>USART_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_printf
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1SendStr
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_DMA_Config
</UL>

<P><STRONG><a name="[e4]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_printf
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1SendStr
</UL>

<P><STRONG><a name="[d2]"></a>USART_GetITStatus</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[dd]"></a>USART_ITConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1Init
</UL>

<P><STRONG><a name="[d9]"></a>USART_Init</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1Init
</UL>

<P><STRONG><a name="[d8]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[db]"></a>Uart1Init</STRONG> (Thumb, 260 bytes, Stack size 48 bytes, usart.o(i.Uart1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Uart1Init &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; prvTraceStoreKernelCallWithParam &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTraceSetISRProperties
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTraceSetSemaphoreName
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_DMA_Config
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8b]"></a>Uart1SendStr</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, usart.o(i.Uart1SendStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Uart1SendStr &rArr; xQueueSemaphoreTake &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; prvTraceStoreTaskReady &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irda_sending_Task
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irda_learning_Task
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_analysis_Task
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_print_back_Task
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_D1_Task
</UL>

<P><STRONG><a name="[54]"></a>Uart1_print_back_Task</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, app_tsks.o(i.Uart1_print_back_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Uart1_print_back_Task &rArr; uart1_printf &rArr; xQueueSemaphoreTake &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; prvTraceStoreTaskReady &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTracePrintF
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_printf
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1SendStr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[eb]"></a>__0snprintf</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[182]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[d4]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[183]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[184]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[ed]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[185]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[186]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[187]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[15c]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_printf
</UL>

<P><STRONG><a name="[188]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[189]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[18a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[53]"></a>cmd_analysis_Task</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, app_tsks.o(i.cmd_analysis_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = cmd_analysis_Task &rArr; uart1_printf &rArr; xQueueSemaphoreTake &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; prvTraceStoreTaskReady &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1SendStr
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[f6]"></a>code_sending</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, app_tsks.o(i.code_sending))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = code_sending &rArr; TIM2_delay_us &rArr; Timer2_counter_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_pwm_on
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_pwm_off
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_delay_us
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadHalfWord
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irda_sending_Task
</UL>

<P><STRONG><a name="[50]"></a>irda_learning_Task</STRONG> (Thumb, 272 bytes, Stack size 48 bytes, app_tsks.o(i.irda_learning_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = irda_learning_Task &rArr; uart1_printf &rArr; xQueueSemaphoreTake &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; prvTraceStoreTaskReady &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1SendStr
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteHalfWord
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadHalfWord
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ErasePage
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_tsks.o(i.cmd_analysis_Task)
</UL>
<P><STRONG><a name="[51]"></a>irda_sending_Task</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, app_tsks.o(i.irda_sending_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = irda_sending_Task &rArr; Uart1SendStr &rArr; xQueueSemaphoreTake &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; prvTraceStoreTaskReady &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1SendStr
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_sending
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_tsks.o(i.cmd_analysis_Task)
</UL>
<P><STRONG><a name="[48]"></a>main</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = main &rArr; Uart1Init &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; prvTraceStoreKernelCallWithParam &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTraceEnable
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX276TxStart
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadDio0
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_SPI
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[11d]"></a>prvMarkObjectAsUsed</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, trcsnapshotrecorder.o(i.prvMarkObjectAsUsed))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvMarkObjectAsUsed &rArr; uiIndexOfObject &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiIndexOfObject
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[12f]"></a>prvTraceError</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, trcsnapshotrecorder.o(i.prvTraceError))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTraceStop
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvStrncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTraceEnable
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreTaskswitch
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreTaskReady
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreKernelCallWithParam
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceSetPriorityProperty
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceSetObjectName
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetPriorityProperty
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreObjectPropertiesOnCloseEvent
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreObjectNameOnCloseEvent
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreKernelCallWithNumericParamOnly
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreKernelCall
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceSetTaskInstanceFinished
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceSetObjectState
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetObjectHandle
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceFreeObjectHandle
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTraceSetISRProperties
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTraceStoreISREnd
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTraceStoreISRBegin
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTraceRegisterString
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiTraceStart
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiIndexOfObject
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceInitCortexM
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt8
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt32
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt16
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTracePrintF_Helper
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceUserEventFormat
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceOpenSymbol
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceNextFreeEventBufferSlot
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceLookupSymbolTableEntry
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetParam
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetObjectState
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetDTS
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetChecksum
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceCreateSymbolTableEntry
</UL>

<P><STRONG><a name="[132]"></a>prvTraceFreeObjectHandle</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, trcsnapshotrecorder.o(i.prvTraceFreeObjectHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvTraceFreeObjectHandle &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceError
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[10c]"></a>prvTraceGetCurrentTaskHandle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, trckernelport.o(i.prvTraceGetCurrentTaskHandle))
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiTraceStart
</UL>

<P><STRONG><a name="[106]"></a>prvTraceGetObjectHandle</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, trcsnapshotrecorder.o(i.prvTraceGetObjectHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvTraceGetObjectHandle &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceError
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pszTraceGetErrorNotEnoughHandles
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiTraceStart
</UL>

<P><STRONG><a name="[13b]"></a>prvTraceGetPriorityProperty</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, trcsnapshotrecorder.o(i.prvTraceGetPriorityProperty))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvTraceGetPriorityProperty &rArr; uiIndexOfObject &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiIndexOfObject
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceError
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
</UL>

<P><STRONG><a name="[13c]"></a>prvTraceGetQueueNumber</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, trckernelport.o(i.prvTraceGetQueueNumber))
<BR><BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueGetQueueNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceSetQueueNumberLow16
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceSetQueueNumberHigh16
</UL>

<P><STRONG><a name="[11e]"></a>prvTraceGetQueueNumberHigh16</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, trckernelport.o(i.prvTraceGetQueueNumberHigh16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvTraceGetQueueNumberHigh16
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueGetQueueNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[11c]"></a>prvTraceGetQueueNumberLow16</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, trckernelport.o(i.prvTraceGetQueueNumberLow16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvTraceGetQueueNumberLow16
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueGetQueueNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTraceSetSemaphoreName
</UL>

<P><STRONG><a name="[119]"></a>prvTraceGetQueueType</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, trckernelport.o(i.prvTraceGetQueueType))
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucQueueGetQueueType
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[10d]"></a>prvTraceGetTaskNumberHigh16</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, trckernelport.o(i.prvTraceGetTaskNumberHigh16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvTraceGetTaskNumberHigh16
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetTaskNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[109]"></a>prvTraceGetTaskNumberLow16</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, trckernelport.o(i.prvTraceGetTaskNumberLow16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvTraceGetTaskNumberLow16
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetTaskNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiTraceStart
</UL>

<P><STRONG><a name="[140]"></a>prvTraceInitCortexM</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, trcsnapshotrecorder.o(i.prvTraceInitCortexM))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvTraceInitCortexM &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceError
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceInitTraceData
</UL>

<P><STRONG><a name="[144]"></a>prvTraceIsSchedulerSuspended</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, trckernelport.o(i.prvTraceIsSchedulerSuspended))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvTraceIsSchedulerSuspended
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTraceStoreISREnd
</UL>

<P><STRONG><a name="[135]"></a>prvTracePortGetTimeStamp</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, trcsnapshotrecorder.o(i.prvTracePortGetTimeStamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvTracePortGetTimeStamp
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetDTS
</UL>

<P><STRONG><a name="[10a]"></a>prvTraceSetObjectName</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, trcsnapshotrecorder.o(i.prvTraceSetObjectName))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvTraceSetObjectName &rArr; uiIndexOfObject &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiIndexOfObject
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceError
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvStrncpy
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pszTraceGetErrorNotEnoughHandles
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTraceSetISRProperties
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTraceSetSemaphoreName
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiTraceStart
</UL>

<P><STRONG><a name="[11f]"></a>prvTraceSetObjectState</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, trcsnapshotrecorder.o(i.prvTraceSetObjectState))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvTraceSetObjectState &rArr; uiIndexOfObject &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiIndexOfObject
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceError
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreTaskswitch
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[10b]"></a>prvTraceSetPriorityProperty</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, trcsnapshotrecorder.o(i.prvTraceSetPriorityProperty))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvTraceSetPriorityProperty &rArr; uiIndexOfObject &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiIndexOfObject
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceError
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTraceSetISRProperties
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiTraceStart
</UL>

<P><STRONG><a name="[11b]"></a>prvTraceSetQueueNumberHigh16</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, trckernelport.o(i.prvTraceSetQueueNumberHigh16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvTraceSetQueueNumberHigh16
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueSetQueueNumber
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetQueueNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[11a]"></a>prvTraceSetQueueNumberLow16</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, trckernelport.o(i.prvTraceSetQueueNumberLow16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvTraceSetQueueNumberLow16
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueSetQueueNumber
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetQueueNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[14a]"></a>prvTraceSetTaskInstanceFinished</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, trcsnapshotrecorder.o(i.prvTraceSetTaskInstanceFinished))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvTraceSetTaskInstanceFinished &rArr; uiIndexOfObject &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiIndexOfObject
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceError
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[108]"></a>prvTraceSetTaskNumberHigh16</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, trckernelport.o(i.prvTraceSetTaskNumberHigh16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvTraceSetTaskNumberHigh16
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTaskNumber
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetTaskNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[107]"></a>prvTraceSetTaskNumberLow16</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, trckernelport.o(i.prvTraceSetTaskNumberLow16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvTraceSetTaskNumberLow16
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTaskNumber
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetTaskNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[10e]"></a>prvTraceStoreKernelCall</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, trcsnapshotrecorder.o(i.prvTraceStoreKernelCall))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvTraceStoreKernelCall &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceError
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceUpdateCounters
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceNextFreeEventBufferSlot
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetDTS
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[14c]"></a>prvTraceStoreKernelCallWithNumericParamOnly</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, trcsnapshotrecorder.o(i.prvTraceStoreKernelCallWithNumericParamOnly))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvTraceStoreKernelCallWithNumericParamOnly &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceError
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceUpdateCounters
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceNextFreeEventBufferSlot
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetParam
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetDTS
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[14d]"></a>prvTraceStoreKernelCallWithParam</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, trcsnapshotrecorder.o(i.prvTraceStoreKernelCallWithParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvTraceStoreKernelCallWithParam &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceError
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceUpdateCounters
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceNextFreeEventBufferSlot
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetParam
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetDTS
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
</UL>

<P><STRONG><a name="[14e]"></a>prvTraceStoreObjectNameOnCloseEvent</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, trcsnapshotrecorder.o(i.prvTraceStoreObjectNameOnCloseEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvTraceStoreObjectNameOnCloseEvent &rArr; prvTraceOpenSymbol &rArr; prvTraceLookupSymbolTableEntry &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiIndexOfObject
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceError
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceUpdateCounters
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceOpenSymbol
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceNextFreeEventBufferSlot
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[14f]"></a>prvTraceStoreObjectPropertiesOnCloseEvent</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, trcsnapshotrecorder.o(i.prvTraceStoreObjectPropertiesOnCloseEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvTraceStoreObjectPropertiesOnCloseEvent &rArr; uiIndexOfObject &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiIndexOfObject
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceError
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceUpdateCounters
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceNextFreeEventBufferSlot
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[10f]"></a>prvTraceStoreTaskReady</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, trcsnapshotrecorder.o(i.prvTraceStoreTaskReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvTraceStoreTaskReady &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceError
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceUpdateCounters
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceNextFreeEventBufferSlot
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetDTS
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
</UL>

<P><STRONG><a name="[150]"></a>prvTraceStoreTaskswitch</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, trcsnapshotrecorder.o(i.prvTraceStoreTaskswitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvTraceStoreTaskswitch &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceSetObjectState
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceError
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceUpdateCounters
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceNextFreeEventBufferSlot
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetObjectState
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetDTS
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiTraceStart
</UL>

<P><STRONG><a name="[138]"></a>pszTraceGetErrorNotEnoughHandles</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, trckernelport.o(i.pszTraceGetErrorNotEnoughHandles))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceSetObjectName
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetObjectHandle
</UL>

<P><STRONG><a name="[95]"></a>pvPortMalloc</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; prvTraceStoreTaskReady &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTraceStoreMemMangEvent
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irda_learning_Task
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_analysis_Task
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276DeviceInit
</UL>

<P><STRONG><a name="[16e]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[122]"></a>pxPortInitialiseStack</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[e9]"></a>uart1_printf</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, usart.o(i.uart1_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = uart1_printf &rArr; xQueueSemaphoreTake &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; prvTraceStoreTaskReady &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irda_learning_Task
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_analysis_Task
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_print_back_Task
</UL>

<P><STRONG><a name="[13e]"></a>ucQueueGetQueueType</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, queue.o(i.ucQueueGetQueueType))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetQueueType
</UL>

<P><STRONG><a name="[125]"></a>uiIndexOfObject</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, trcsnapshotrecorder.o(i.uiIndexOfObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uiIndexOfObject &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceError
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceSetPriorityProperty
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceSetObjectName
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetPriorityProperty
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreObjectPropertiesOnCloseEvent
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreObjectNameOnCloseEvent
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceSetTaskInstanceFinished
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceSetObjectState
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMarkObjectAsUsed
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetObjectState
</UL>

<P><STRONG><a name="[15d]"></a>uiTraceStart</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, trcsnapshotrecorder.o(i.uiTraceStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = uiTraceStart &rArr; prvTraceStoreTaskswitch &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreTaskswitch
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceSetPriorityProperty
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceSetObjectName
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetTaskNumberLow16
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetObjectHandle
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetCurrentTaskHandle
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceError
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTraceEnable
</UL>

<P><STRONG><a name="[e8]"></a>ulTaskNotifyTake</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, tasks.o(i.ulTaskNotifyTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ulTaskNotifyTake &rArr; prvTraceStoreKernelCallWithParam &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreKernelCallWithParam
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceSetTaskInstanceFinished
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetTaskNumberLow16
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetTaskNumberHigh16
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetCurrentTaskHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irda_sending_Task
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irda_learning_Task
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_analysis_Task
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_print_back_Task
</UL>

<P><STRONG><a name="[100]"></a>uxListRemove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
</UL>

<P><STRONG><a name="[13d]"></a>uxQueueGetQueueNumber</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, queue.o(i.uxQueueGetQueueNumber))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetQueueNumberLow16
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetQueueNumberHigh16
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetQueueNumber
</UL>

<P><STRONG><a name="[13f]"></a>uxTaskGetTaskNumber</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.uxTaskGetTaskNumber))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceSetTaskNumberLow16
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceSetTaskNumberHigh16
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetTaskNumberLow16
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetTaskNumberHigh16
</UL>

<P><STRONG><a name="[105]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[121]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[102]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[101]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
</UL>

<P><STRONG><a name="[104]"></a>vPortEnterCritical</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[110]"></a>vPortExitCritical</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[116]"></a>vPortFree</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; prvTraceStoreTaskReady &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTraceStoreMemMangEvent
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[168]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[15e]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[149]"></a>vQueueSetQueueNumber</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, queue.o(i.vQueueSetQueueNumber))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceSetQueueNumberLow16
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceSetQueueNumberHigh16
</UL>

<P><STRONG><a name="[12c]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; prvTraceStoreTaskReady &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[8d]"></a>vTaskDelay</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; prvTraceStoreTaskReady &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreKernelCallWithNumericParamOnly
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceSetTaskInstanceFinished
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetTaskNumberLow16
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetTaskNumberHigh16
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetCurrentTaskHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irda_learning_Task
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_D1_Task
</UL>

<P><STRONG><a name="[f4]"></a>vTaskDelete</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, tasks.o(i.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; prvTraceStoreTaskReady &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceSetPriorityProperty
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreObjectPropertiesOnCloseEvent
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreObjectNameOnCloseEvent
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreKernelCall
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceSetObjectState
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetTaskNumberLow16
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetTaskNumberHigh16
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetCurrentTaskHandle
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceFreeObjectHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_analysis_Task
</UL>

<P><STRONG><a name="[16b]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[158]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[d5]"></a>vTaskNotifyGiveFromISR</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, tasks.o(i.vTaskNotifyGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = vTaskNotifyGiveFromISR &rArr; prvTraceStoreTaskReady &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreTaskReady
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreKernelCall
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetTaskNumberLow16
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetTaskNumberHigh16
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[162]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[160]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvTraceStoreKernelCallWithNumericParamOnly &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreKernelCallWithNumericParamOnly
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceSetTaskInstanceFinished
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetTaskNumberLow16
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetTaskNumberHigh16
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetCurrentTaskHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[163]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, tasks.o(i.vTaskPriorityDisinheritAfterTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = vTaskPriorityDisinheritAfterTimeout &rArr; prvTraceStoreKernelCallWithParam &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreTaskReady
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreKernelCallWithParam
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceSetPriorityProperty
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetPriorityProperty
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetTaskNumberLow16
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetTaskNumberHigh16
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[14b]"></a>vTaskSetTaskNumber</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskSetTaskNumber))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceSetTaskNumberLow16
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceSetTaskNumberHigh16
</UL>

<P><STRONG><a name="[fe]"></a>vTaskStartScheduler</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; prvTraceStoreTaskReady &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreTaskswitch
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetTaskNumberLow16
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetTaskNumberHigh16
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetCurrentTaskHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12a]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[5b]"></a>vTaskSwitchContext</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = vTaskSwitchContext &rArr; prvTraceStoreTaskswitch &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreTaskswitch
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetTaskNumberLow16
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetTaskNumberHigh16
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetCurrentTaskHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortPendSVHandler
</UL>

<P><STRONG><a name="[fa]"></a>vTraceEnable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, trcsnapshotrecorder.o(i.vTraceEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = vTraceEnable &rArr; uiTraceStart &rArr; prvTraceStoreTaskswitch &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiTraceStart
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceError
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceInitTraceData
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[143]"></a>vTraceInitObjectHandleStack</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, trckernelport.o(i.vTraceInitObjectHandleStack))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceInitTraceData
</UL>

<P><STRONG><a name="[142]"></a>vTraceInitObjectPropertyTable</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, trckernelport.o(i.vTraceInitObjectPropertyTable))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceInitTraceData
</UL>

<P><STRONG><a name="[d1]"></a>vTracePrintF</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, trcsnapshotrecorder.o(i.vTracePrintF))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = vTracePrintF &rArr; vTracePrintF_Helper &rArr; prvTraceUserEventFormat &rArr; xTraceRegisterString &rArr; prvTraceOpenSymbol &rArr; prvTraceLookupSymbolTableEntry &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTracePrintF_Helper
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_print_back_Task
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[e0]"></a>vTraceSetSemaphoreName</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, trckernelport.o(i.vTraceSetSemaphoreName))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTraceSetSemaphoreName &rArr; prvTraceSetObjectName &rArr; uiIndexOfObject &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceSetObjectName
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetQueueNumberLow16
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1Init
</UL>

<P><STRONG><a name="[131]"></a>vTraceStop</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, trcsnapshotrecorder.o(i.vTraceStop))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceError
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTracePrintF_Helper
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceUpdateCounters
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceInitTraceData
</UL>

<P><STRONG><a name="[75]"></a>vTraceStoreISRBegin</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, trcsnapshotrecorder.o(i.vTraceStoreISRBegin))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vTraceStoreISRBegin &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceError
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceUpdateCounters
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceNextFreeEventBufferSlot
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetDTS
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
</UL>

<P><STRONG><a name="[79]"></a>vTraceStoreISREnd</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, trcsnapshotrecorder.o(i.vTraceStoreISREnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vTraceStoreISREnd &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceError
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceUpdateCounters
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceNextFreeEventBufferSlot
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetDTS
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceIsSchedulerSuspended
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
</UL>

<P><STRONG><a name="[15b]"></a>vTraceStoreMemMangEvent</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, trcsnapshotrecorder.o(i.vTraceStoreMemMangEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vTraceStoreMemMangEvent &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceUpdateCounters
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceNextFreeEventBufferSlot
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetParam
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetDTS
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[165]"></a>xPortStartScheduler</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[9]"></a>xPortSysTickHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick &rArr; prvTraceStoreTaskReady &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[df]"></a>xQueueGenericCreate</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; prvTraceStoreTaskReady &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreKernelCallWithNumericParamOnly
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetTaskNumberHigh16
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetCurrentTaskHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[118]"></a>xQueueGenericReset</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; prvTraceStoreTaskReady &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[e2]"></a>xQueueGenericSend</STRONG> (Thumb, 604 bytes, Stack size 72 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; prvTraceStoreKernelCallWithParam &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreKernelCall
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceSetObjectState
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetTaskNumberHigh16
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetQueueType
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetQueueNumberLow16
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetQueueNumberHigh16
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetCurrentTaskHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1Init
</UL>

<P><STRONG><a name="[16d]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; prvTraceStoreKernelCallWithParam &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreKernelCall
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceSetObjectState
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetQueueType
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetQueueNumberLow16
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetQueueNumberHigh16
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[78]"></a>xQueueGiveFromISR</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, queue.o(i.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList &rArr; prvTraceStoreTaskReady &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreKernelCall
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceSetObjectState
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetQueueType
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetQueueNumberLow16
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetQueueNumberHigh16
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
</UL>

<P><STRONG><a name="[128]"></a>xQueueReceive</STRONG> (Thumb, 614 bytes, Stack size 64 bytes, queue.o(i.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = xQueueReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; prvTraceStoreTaskReady &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreKernelCall
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceSetTaskInstanceFinished
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceSetObjectState
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetTaskNumberLow16
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetTaskNumberHigh16
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetQueueType
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetQueueNumberLow16
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetQueueNumberHigh16
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetCurrentTaskHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[e3]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 700 bytes, Stack size 64 bytes, queue.o(i.xQueueSemaphoreTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = xQueueSemaphoreTake &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; prvTraceStoreTaskReady &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreKernelCall
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceSetTaskInstanceFinished
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceSetObjectState
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetTaskNumberLow16
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetTaskNumberHigh16
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetQueueType
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetQueueNumberLow16
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetQueueNumberHigh16
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetCurrentTaskHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_printf
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1SendStr
</UL>

<P><STRONG><a name="[16c]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[f5]"></a>xTaskCreate</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; prvTraceStoreTaskReady &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_analysis_Task
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[ea]"></a>xTaskGenericNotify</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, tasks.o(i.xTaskGenericNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xTaskGenericNotify &rArr; prvTraceStoreTaskReady &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreTaskReady
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreKernelCall
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetTaskNumberLow16
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetTaskNumberHigh16
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetCurrentTaskHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_analysis_Task
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_print_back_Task
</UL>

<P><STRONG><a name="[e7]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetCurrentTaskHandle))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_print_back_Task
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetCurrentTaskHandle
</UL>

<P><STRONG><a name="[145]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceIsSchedulerSuspended
</UL>

<P><STRONG><a name="[fc]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[16a]"></a>xTaskIncrementTick</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xTaskIncrementTick &rArr; prvTraceStoreTaskReady &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreTaskReady
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTracePortGetTimeStamp
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetTaskNumberLow16
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetTaskNumberHigh16
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[114]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xTaskPriorityDisinherit &rArr; prvTraceStoreKernelCallWithParam &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreTaskReady
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreKernelCallWithParam
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceSetPriorityProperty
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetPriorityProperty
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetTaskNumberLow16
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetTaskNumberHigh16
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[16f]"></a>xTaskPriorityInherit</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, tasks.o(i.xTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xTaskPriorityInherit &rArr; prvTraceStoreKernelCallWithParam &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreTaskReady
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreKernelCallWithParam
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceSetPriorityProperty
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetPriorityProperty
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetTaskNumberLow16
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetTaskNumberHigh16
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[157]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xTaskRemoveFromEventList &rArr; prvTraceStoreTaskReady &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreTaskReady
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetTaskNumberLow16
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetTaskNumberHigh16
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[12b]"></a>xTaskResumeAll</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick &rArr; prvTraceStoreTaskReady &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreTaskReady
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetTaskNumberLow16
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetTaskNumberHigh16
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[fb]"></a>xTimerCreate</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, timers.o(i.xTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = xTimerCreate &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; prvTraceStoreTaskReady &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[164]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; prvTraceStoreTaskReady &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[fd]"></a>xTimerGenericCommand</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; prvTraceStoreKernelCallWithParam &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[152]"></a>xTraceRegisterString</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, trcsnapshotrecorder.o(i.xTraceRegisterString))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xTraceRegisterString &rArr; prvTraceOpenSymbol &rArr; prvTraceLookupSymbolTableEntry &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceError
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceOpenSymbol
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceUserEventFormat
</UL>

<P><STRONG><a name="[e1]"></a>xTraceSetISRProperties</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, trcsnapshotrecorder.o(i.xTraceSetISRProperties))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xTraceSetISRProperties &rArr; prvTraceSetPriorityProperty &rArr; uiIndexOfObject &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceSetPriorityProperty
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceSetObjectName
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceError
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1Init
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[bd]"></a>SetSysClockTo72</STRONG> (Thumb, 190 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[35]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[112]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[113]"></a>prvCopyDataToQueue</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; prvTraceStoreKernelCallWithParam &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[117]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; prvTraceStoreTaskReady &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreKernelCall
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceSetQueueNumberLow16
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceSetQueueNumberHigh16
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceSetObjectState
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetTaskNumberHigh16
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetQueueType
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetQueueNumberLow16
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetQueueNumberHigh16
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetObjectHandle
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetCurrentTaskHandle
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMarkObjectAsUsed
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[124]"></a>prvIsQueueEmpty</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[156]"></a>prvUnlockQueue</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; prvTraceStoreTaskReady &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[ff]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[103]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 326 bytes, Stack size 24 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvTraceStoreTaskReady &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreTaskReady
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceSetTaskNumberLow16
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceSetTaskNumberHigh16
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceSetPriorityProperty
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceSetObjectName
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreKernelCall
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetTaskNumberLow16
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetTaskNumberHigh16
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetObjectHandle
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetCurrentTaskHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[115]"></a>prvDeleteTCB</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; prvTraceStoreTaskReady &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[57]"></a>prvIdleTask</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = prvIdleTask &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; prvTraceStoreTaskReady &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[120]"></a>prvInitialiseNewTask</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[161]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[111]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; prvTraceStoreTaskReady &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[123]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[126]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; prvTraceStoreKernelCallWithParam &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[129]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; prvTraceStoreKernelCallWithParam &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[127]"></a>prvSampleTimeNow</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; prvTraceStoreKernelCallWithParam &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[12d]"></a>prvSwitchTimerLists</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; prvTraceStoreKernelCallWithParam &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[58]"></a>prvTimerTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; prvTraceStoreKernelCallWithParam &rArr; prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[56]"></a>prvTaskExitError</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[159]"></a>prvHeapInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[15a]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[c9]"></a>USART1_DMA_Config</STRONG> (Thumb, 200 bytes, Stack size 80 bytes, usart.o(i.USART1_DMA_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USART1_DMA_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1Init
</UL>

<P><STRONG><a name="[130]"></a>prvStrncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, trcsnapshotrecorder.o(i.prvStrncpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvStrncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceSetObjectName
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceError
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceInitTraceData
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceCreateSymbolTableEntry
</UL>

<P><STRONG><a name="[12e]"></a>prvTraceCreateSymbolTableEntry</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, trcsnapshotrecorder.o(i.prvTraceCreateSymbolTableEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvTraceCreateSymbolTableEntry &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceError
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvStrncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceOpenSymbol
</UL>

<P><STRONG><a name="[133]"></a>prvTraceGetChecksum</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, trcsnapshotrecorder.o(i.prvTraceGetChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvTraceGetChecksum &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceError
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceOpenSymbol
</UL>

<P><STRONG><a name="[134]"></a>prvTraceGetDTS</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, trcsnapshotrecorder.o(i.prvTraceGetDTS))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvTraceGetDTS &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTracePortGetTimeStamp
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceError
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceUpdateCounters
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceNextFreeEventBufferSlot
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTraceStoreMemMangEvent
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreTaskswitch
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreTaskReady
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreKernelCallWithParam
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreKernelCallWithNumericParamOnly
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreKernelCall
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTraceStoreISREnd
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTraceStoreISRBegin
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTracePrintF_Helper
</UL>

<P><STRONG><a name="[139]"></a>prvTraceGetObjectState</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, trcsnapshotrecorder.o(i.prvTraceGetObjectState))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvTraceGetObjectState &rArr; uiIndexOfObject &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiIndexOfObject
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceError
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreTaskswitch
</UL>

<P><STRONG><a name="[13a]"></a>prvTraceGetParam</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, trcsnapshotrecorder.o(i.prvTraceGetParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvTraceGetParam &rArr; prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceError
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceUpdateCounters
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceNextFreeEventBufferSlot
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTraceStoreMemMangEvent
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreKernelCallWithParam
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreKernelCallWithNumericParamOnly
</UL>

<P><STRONG><a name="[141]"></a>prvTraceInitTraceData</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, trcsnapshotrecorder.o(i.prvTraceInitTraceData))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvTraceInitTraceData &rArr; prvTraceInitCortexM &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTraceStop
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceInitCortexM
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvStrncpy
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTraceInitObjectPropertyTable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTraceInitObjectHandleStack
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTraceEnable
</UL>

<P><STRONG><a name="[146]"></a>prvTraceLookupSymbolTableEntry</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, trcsnapshotrecorder.o(i.prvTraceLookupSymbolTableEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvTraceLookupSymbolTableEntry &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceError
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceOpenSymbol
</UL>

<P><STRONG><a name="[136]"></a>prvTraceNextFreeEventBufferSlot</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, trcsnapshotrecorder.o(i.prvTraceNextFreeEventBufferSlot))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvTraceNextFreeEventBufferSlot &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceError
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTraceStoreMemMangEvent
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreTaskswitch
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreTaskReady
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreKernelCallWithParam
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreObjectPropertiesOnCloseEvent
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreObjectNameOnCloseEvent
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreKernelCallWithNumericParamOnly
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreKernelCall
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTraceStoreISREnd
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTraceStoreISRBegin
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetParam
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetDTS
</UL>

<P><STRONG><a name="[148]"></a>prvTraceOpenSymbol</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, trcsnapshotrecorder.o(i.prvTraceOpenSymbol))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvTraceOpenSymbol &rArr; prvTraceLookupSymbolTableEntry &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceError
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceLookupSymbolTableEntry
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetChecksum
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceCreateSymbolTableEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreObjectNameOnCloseEvent
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTraceRegisterString
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTracePrintF_Helper
</UL>

<P><STRONG><a name="[137]"></a>prvTraceUpdateCounters</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, trcsnapshotrecorder.o(i.prvTraceUpdateCounters))
<BR><BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTraceStop
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTraceStoreMemMangEvent
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreTaskswitch
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreTaskReady
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreKernelCallWithParam
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreObjectPropertiesOnCloseEvent
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreObjectNameOnCloseEvent
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreKernelCallWithNumericParamOnly
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceStoreKernelCall
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTraceStoreISREnd
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTraceStoreISRBegin
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetParam
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetDTS
</UL>

<P><STRONG><a name="[151]"></a>prvTraceUserEventFormat</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, trcsnapshotrecorder.o(i.prvTraceUserEventFormat))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = prvTraceUserEventFormat &rArr; xTraceRegisterString &rArr; prvTraceOpenSymbol &rArr; prvTraceLookupSymbolTableEntry &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTraceRegisterString
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceError
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt8
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt32
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt16
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTracePrintF_Helper
</UL>

<P><STRONG><a name="[166]"></a>vTracePrintF_Helper</STRONG> (Thumb, 196 bytes, Stack size 64 bytes, trcsnapshotrecorder.o(i.vTracePrintF_Helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = vTracePrintF_Helper &rArr; prvTraceUserEventFormat &rArr; xTraceRegisterString &rArr; prvTraceOpenSymbol &rArr; prvTraceLookupSymbolTableEntry &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTraceStop
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceError
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceUserEventFormat
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceOpenSymbol
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceGetDTS
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTracePrintF
</UL>

<P><STRONG><a name="[154]"></a>writeInt16</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, trcsnapshotrecorder.o(i.writeInt16))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = writeInt16 &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceError
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceUserEventFormat
</UL>

<P><STRONG><a name="[153]"></a>writeInt32</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, trcsnapshotrecorder.o(i.writeInt32))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = writeInt32 &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceError
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceUserEventFormat
</UL>

<P><STRONG><a name="[155]"></a>writeInt8</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, trcsnapshotrecorder.o(i.writeInt8))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = writeInt8 &rArr; prvTraceError &rArr; prvStrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceError
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTraceUserEventFormat
</UL>

<P><STRONG><a name="[ee]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ec]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
</UL>

<P><STRONG><a name="[f1]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[f0]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4e]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0snprintf)
</UL>
<P><STRONG><a name="[4f]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsprintf)
</UL>
<P><STRONG><a name="[4c]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
